/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<Integer> preorder(Node root) {
        //List<Node> stack=new LinkedList<>();
        Stack<Node> stack=new Stack<>();
        List<Integer> output=new LinkedList<>();
        if(root==null)
        {
            return output;
        }
        stack.push(root);
        while(!stack.isEmpty())
        {
            
            Node node=stack.pop();
            output.add(node.val);
            Collections.reverse(node.children);
            for(Node item:node.children)
            {
                stack.push(item);
            }

        }
        return output;
    }
}
==================================================
class Solution {
    public List<Integer> preorder(Node root) {
        List<Integer> list=new ArrayList<>();
        helper(root,list);
        return list;
    }
    private void helper(Node root,List<Integer> list)
    {
        if(root==null)
        {
            return;
        }
        list.add(root.val);
        if(root.children!=null)
        {
            for(Node rt:root.children)
            {
                helper(rt,list);
            }
        }
    }
}
