class MyQueue {
    private Stack<Integer> stack1=new Stack<Integer>();
    private Stack<Integer> stack2=new Stack<Integer>();
    /** Initialize your data structure here. */
    public MyQueue() {
        stack1=new Stack<>();
        stack2=new Stack<>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        stack1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        int res=0;
        if(stack2.isEmpty()){
            while(!stack1.isEmpty())
            {
                int temp=stack1.pop();
                res=stack2.push(temp);
            }
            return stack2.pop();
        }
        else
        {
            return stack2.pop();
        }
        
           
    }
    
    /** Get the front element. */
    public int peek() {
        if(stack2.isEmpty())
        {
            while(!stack1.isEmpty())
            {
                int temp=stack1.pop();
                stack2.push(temp);
            }
        }
        return stack2.peek();
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
    return stack1.isEmpty() && stack2.isEmpty();
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
